// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reverted/ex/server (interfaces: Interceptor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	ex "github.com/reverted/ex"
	reflect "reflect"
)

// MockInterceptor is a mock of Interceptor interface
type MockInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockInterceptorMockRecorder
}

// MockInterceptorMockRecorder is the mock recorder for MockInterceptor
type MockInterceptorMockRecorder struct {
	mock *MockInterceptor
}

// NewMockInterceptor creates a new mock instance
func NewMockInterceptor(ctrl *gomock.Controller) *MockInterceptor {
	mock := &MockInterceptor{ctrl: ctrl}
	mock.recorder = &MockInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterceptor) EXPECT() *MockInterceptorMockRecorder {
	return m.recorder
}

// Intercept mocks base method
func (m *MockInterceptor) Intercept(arg0 context.Context, arg1 ex.Command) (ex.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intercept", arg0, arg1)
	ret0, _ := ret[0].(ex.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Intercept indicates an expected call of Intercept
func (mr *MockInterceptorMockRecorder) Intercept(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intercept", reflect.TypeOf((*MockInterceptor)(nil).Intercept), arg0, arg1)
}
