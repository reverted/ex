// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reverted/ex/client/xsql (interfaces: Scannable)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	xsql "github.com/reverted/ex/client/xsql"
	reflect "reflect"
)

// MockScannable is a mock of Scannable interface
type MockScannable struct {
	ctrl     *gomock.Controller
	recorder *MockScannableMockRecorder
}

// MockScannableMockRecorder is the mock recorder for MockScannable
type MockScannableMockRecorder struct {
	mock *MockScannable
}

// NewMockScannable creates a new mock instance
func NewMockScannable(ctrl *gomock.Controller) *MockScannable {
	mock := &MockScannable{ctrl: ctrl}
	mock.recorder = &MockScannableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScannable) EXPECT() *MockScannableMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockScannable) Scan(arg0 xsql.Rows) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockScannableMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScannable)(nil).Scan), arg0)
}
