// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reverted/ex/client/xsql (interfaces: ColumnType)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockColumnType is a mock of ColumnType interface
type MockColumnType struct {
	ctrl     *gomock.Controller
	recorder *MockColumnTypeMockRecorder
}

// MockColumnTypeMockRecorder is the mock recorder for MockColumnType
type MockColumnTypeMockRecorder struct {
	mock *MockColumnType
}

// NewMockColumnType creates a new mock instance
func NewMockColumnType(ctrl *gomock.Controller) *MockColumnType {
	mock := &MockColumnType{ctrl: ctrl}
	mock.recorder = &MockColumnTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockColumnType) EXPECT() *MockColumnTypeMockRecorder {
	return m.recorder
}

// DatabaseTypeName mocks base method
func (m *MockColumnType) DatabaseTypeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseTypeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseTypeName indicates an expected call of DatabaseTypeName
func (mr *MockColumnTypeMockRecorder) DatabaseTypeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseTypeName", reflect.TypeOf((*MockColumnType)(nil).DatabaseTypeName))
}

// Name mocks base method
func (m *MockColumnType) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockColumnTypeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockColumnType)(nil).Name))
}

// ScanType mocks base method
func (m *MockColumnType) ScanType() reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ScanType indicates an expected call of ScanType
func (mr *MockColumnTypeMockRecorder) ScanType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanType", reflect.TypeOf((*MockColumnType)(nil).ScanType))
}
