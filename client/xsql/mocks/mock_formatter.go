// Code generated by MockGen. DO NOT EDIT.
// Source: client/xsql/executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ex "github.com/reverted/ex"
)

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// Format mocks base method.
func (m *MockFormatter) Format(arg0 ex.Command, arg1 map[string]string) (ex.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", arg0, arg1)
	ret0, _ := ret[0].(ex.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Format indicates an expected call of Format.
func (mr *MockFormatterMockRecorder) Format(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockFormatter)(nil).Format), arg0, arg1)
}
